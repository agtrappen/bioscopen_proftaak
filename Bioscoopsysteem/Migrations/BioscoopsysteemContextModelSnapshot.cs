// <auto-generated />
using System;
using Bioscoopsysteem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bioscoopsysteem.Migrations
{
    [DbContext(typeof(BioscoopsysteemContext))]
    partial class BioscoopsysteemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bioscoopsysteem.Models.Customers", b =>
                {
                    b.Property<int>("CustomersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TicketsTicketId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomersId");

                    b.HasIndex("TicketsTicketId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Halls", b =>
                {
                    b.Property<int>("HallsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SeatsSeatId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowsId")
                        .HasColumnType("int");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("wheelchair_accessable")
                        .HasColumnType("bit");

                    b.HasKey("HallsId");

                    b.HasIndex("SeatsSeatId");

                    b.HasIndex("ShowsId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Movies", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShowsId")
                        .HasColumnType("int");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("ShowsId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Seats", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TicketsTicketId")
                        .HasColumnType("int");

                    b.Property<int>("row_number")
                        .HasColumnType("int");

                    b.Property<int>("seat_number")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("TicketsTicketId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Shows", b =>
                {
                    b.Property<int>("ShowsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketsTicketId")
                        .HasColumnType("int");

                    b.HasKey("ShowsId");

                    b.HasIndex("TicketsTicketId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Tickets", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_sold")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Customers", b =>
                {
                    b.HasOne("Bioscoopsysteem.Models.Tickets", "Tickets")
                        .WithMany("Customers")
                        .HasForeignKey("TicketsTicketId");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Halls", b =>
                {
                    b.HasOne("Bioscoopsysteem.Models.Seats", "Seats")
                        .WithMany("Halls")
                        .HasForeignKey("SeatsSeatId");

                    b.HasOne("Bioscoopsysteem.Models.Shows", "Shows")
                        .WithMany("Halls")
                        .HasForeignKey("ShowsId");

                    b.Navigation("Seats");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Movies", b =>
                {
                    b.HasOne("Bioscoopsysteem.Models.Shows", "Shows")
                        .WithMany("Movies")
                        .HasForeignKey("ShowsId");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Seats", b =>
                {
                    b.HasOne("Bioscoopsysteem.Models.Tickets", "Tickets")
                        .WithMany("Seats")
                        .HasForeignKey("TicketsTicketId");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Shows", b =>
                {
                    b.HasOne("Bioscoopsysteem.Models.Tickets", "Tickets")
                        .WithMany("Shows")
                        .HasForeignKey("TicketsTicketId");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Seats", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Shows", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Bioscoopsysteem.Models.Tickets", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Seats");

                    b.Navigation("Shows");
                });
#pragma warning restore 612, 618
        }
    }
}
